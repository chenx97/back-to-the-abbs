From 4f6815ccc8eb929b6942e86d75f71f495a64436c Mon Sep 17 00:00:00 2001
From: Tianhao Chai <cth451@gmail.com>
Date: Sun, 29 Nov 2020 21:36:52 -0600
Subject: [PATCH 9000/9002] elevator: explode

uaccess: explode injection point

md: injection point

kernel: explode core

fs syscall tracepoints

buffer and mpage tracepoints

buffer_head tracepoints

page_alloc tracepoints

filename tracepoints

explode core

slab injection point

jbd2 tracepoints

fixes
---
 arch/x86/include/asm/uaccess.h |   8 ++
 block/elevator.c               |   4 +
 drivers/md/md.c                |  15 ++++
 fs/buffer.c                    | 136 +++++++++++++++++++++++++++++++-
 fs/jbd2/journal.c              |  15 +++-
 fs/jbd2/transaction.c          |  10 ++-
 fs/mpage.c                     |   2 +-
 fs/namei.c                     |  86 ++++++++++++++++++--
 fs/open.c                      |  63 ++++++++++++++-
 fs/read_write.c                |  59 +++++++++++++-
 fs/sync.c                      |  33 +++++++-
 include/linux/buffer_head.h    |  30 +++++++
 include/linux/explode.h        | 138 +++++++++++++++++++++++++++++++++
 kernel/Makefile                |   2 +-
 kernel/explode.c               |  67 ++++++++++++++++
 kernel/fork.c                  |   4 +
 kernel/sys.c                   |   2 +-
 mm/filemap.c                   |  12 +++
 mm/page_alloc.c                |   4 +
 mm/slab.c                      |   8 ++
 20 files changed, 675 insertions(+), 23 deletions(-)
 create mode 100644 include/linux/explode.h
 create mode 100644 kernel/explode.c

diff --git a/arch/x86/include/asm/uaccess.h b/arch/x86/include/asm/uaccess.h
index eff7fb847149..fc1f3daf0e69 100644
--- a/arch/x86/include/asm/uaccess.h
+++ b/arch/x86/include/asm/uaccess.h
@@ -90,11 +90,19 @@ static inline bool pagefault_disabled(void);
  * Return: true (nonzero) if the memory block may be valid, false (zero)
  * if it is definitely invalid.
  */
+/* EXPLODE */
+#include <linux/explode.h>
+/*
 #define access_ok(addr, size)					\
 ({									\
 	WARN_ON_IN_IRQ();						\
 	likely(!__range_not_ok(addr, size, user_addr_max()));		\
 })
+*/
+#define access_ok(addr,size) \
+        (choose(EKM_USERCOPY, 2) == 0 && !__range_not_ok(addr, size, user_addr_max()))
+/* END EXPLODE */
+
 
 /*
  * These are the main single-value transfer routines.  They automatically
diff --git a/block/elevator.c b/block/elevator.c
index 90ed7a28c21d..32a7d011ea07 100644
--- a/block/elevator.c
+++ b/block/elevator.c
@@ -774,6 +774,10 @@ ssize_t elv_iosched_store(struct request_queue *q, const char *name,
 	return ret;
 }
 
+/* EXPLODE */
+EXPORT_SYMBOL(elv_iosched_store);
+/* END EXPLODE */
+
 ssize_t elv_iosched_show(struct request_queue *q, char *name)
 {
 	struct elevator_queue *e = q->elevator;
diff --git a/drivers/md/md.c b/drivers/md/md.c
index cd3c249d8609..07997402364c 100644
--- a/drivers/md/md.c
+++ b/drivers/md/md.c
@@ -63,6 +63,10 @@
 #include <linux/percpu-refcount.h>
 #include <linux/part_stat.h>
 
+/* EXPLODD */
+#include <linux/explode.h>
+/* END EXPLODE */
+
 #include <trace/events/block.h>
 #include "md.h"
 #include "md-bitmap.h"
@@ -1043,6 +1047,17 @@ int sync_page_io(struct md_rdev *rdev, sector_t sector, int size,
 		bio->bi_iter.bi_sector = sector + rdev->data_offset;
 	bio_add_page(bio, page, size, 0);
 
+	/* EXPLODE */
+	{
+		/* YJF: looks like this bio gets changed.  its
+		   sector becomes old sector + nr_sectors, and its
+		   size becomes 0.  we'll need to either create a
+		   copy of bio or re-use old one.  for now just
+		   treat it as a sync */
+		EXPLODE_HOOK(bio_wait, bio);
+	}
+	/* END EXPLODE */
+
 	submit_bio_wait(bio);
 
 	ret = !bio->bi_status;
diff --git a/fs/buffer.c b/fs/buffer.c
index 5a28a6aa7f16..efa9fd97c715 100644
--- a/fs/buffer.c
+++ b/fs/buffer.c
@@ -51,6 +51,107 @@
 
 #include "internal.h"
 
+/* EXPLODE */
+#include <linux/explode.h>
+/* END EXPLODE */
+
+/* EXPLODE */
+struct buffer_head *ekm_commit_bh = NULL;
+struct bio *ekm_commit_bio = NULL;
+EXPORT_SYMBOL(ekm_commit_bh);
+EXPORT_SYMBOL(ekm_commit_bio);
+/* END EXPLODE */
+
+/* EXPLODE */
+#ifdef EXPLODE_TRACK_DIRTY_BIT
+void set_buffer_dirty(struct buffer_head *bh)
+{
+	set_bit(BH_Dirty, &(bh)->b_state);
+}
+void clear_buffer_dirty(struct buffer_head *bh)
+{
+	EXPLODE_HOOK(bh_clean, bh);
+	clear_bit(BH_Dirty, &(bh)->b_state);
+}
+void clear_buffer_dirty_no_log(struct buffer_head *bh)
+{
+	clear_bit(BH_Dirty, &(bh)->b_state);
+}
+int buffer_dirty(const struct buffer_head *bh)
+{
+	return test_bit(BH_Dirty, &(bh)->b_state);
+}
+int test_set_buffer_dirty(struct buffer_head *bh)
+{
+	return test_and_set_bit(BH_Dirty, &(bh)->b_state);
+}
+int test_clear_buffer_dirty(struct buffer_head *bh)
+{
+	int ret = test_and_clear_bit(BH_Dirty, &(bh)->b_state);
+	if(ret)
+		EXPLODE_HOOK(bh_clean, bh);
+	return ret;
+}
+
+void set_buffer_locked(struct buffer_head *bh)
+{
+	set_bit(BH_Lock, &(bh)->b_state);
+	EXPLODE_HOOK(bh_lock, bh);
+}
+void clear_buffer_locked(struct buffer_head *bh)
+{
+	EXPLODE_HOOK(bh_unlock, bh);
+	clear_bit(BH_Lock, &(bh)->b_state);
+}
+int buffer_locked(const struct buffer_head *bh)
+{
+	return test_bit(BH_Lock, &(bh)->b_state);
+}
+int test_set_buffer_locked(struct buffer_head *bh)
+{
+	int ret = test_and_set_bit(BH_Lock, &(bh)->b_state);
+	if(!ret)
+		EXPLODE_HOOK(bh_lock, bh);
+	return ret;
+}
+int test_clear_buffer_locked(struct buffer_head *bh)
+{
+	int ret = test_and_clear_bit(BH_Lock, &(bh)->b_state);
+	if(ret)
+		EXPLODE_HOOK(bh_unlock, bh);
+	return ret;
+}
+
+void lock_buffer_no_log(struct buffer_head *bh)
+{
+	might_sleep();
+	if(test_and_set_bit(BH_Lock, &(bh)->b_state))
+		__lock_buffer(bh);
+}
+
+void unlock_buffer_no_log(struct buffer_head *bh)
+{
+	clear_bit(BH_Lock, &(bh)->b_state);
+	smp_mb__after_atomic();
+	wake_up_bit(&bh->b_state, BH_Lock);
+}
+
+EXPORT_SYMBOL(set_buffer_dirty);
+EXPORT_SYMBOL(clear_buffer_dirty);
+EXPORT_SYMBOL(clear_buffer_dirty_no_log);
+EXPORT_SYMBOL(buffer_dirty);
+EXPORT_SYMBOL(test_set_buffer_dirty);
+EXPORT_SYMBOL(test_clear_buffer_dirty);
+EXPORT_SYMBOL(set_buffer_locked);
+EXPORT_SYMBOL(clear_buffer_locked);
+EXPORT_SYMBOL(buffer_locked);
+EXPORT_SYMBOL(test_set_buffer_locked);
+EXPORT_SYMBOL(test_clear_buffer_locked);
+EXPORT_SYMBOL(lock_buffer_no_log);
+EXPORT_SYMBOL(unlock_buffer_no_log);
+#endif
+/* END EXPLODE */
+
 static int fsync_buffers_list(spinlock_t *lock, struct list_head *list);
 static int submit_bh_wbc(int op, int op_flags, struct buffer_head *bh,
 			 enum rw_hint hint, struct writeback_control *wbc);
@@ -119,6 +220,10 @@ EXPORT_SYMBOL(buffer_check_dirty_writeback);
  */
 void __wait_on_buffer(struct buffer_head * bh)
 {
+	/* EXPLODE */
+	EXPLODE_HOOK(bh_wait, bh);
+	/* END EXPLODE */
+
 	wait_on_bit_io(&bh->b_state, BH_Lock, TASK_UNINTERRUPTIBLE);
 }
 EXPORT_SYMBOL(__wait_on_buffer);
@@ -1110,6 +1215,9 @@ __getblk_slow(struct block_device *bdev, sector_t block,
  */
 void mark_buffer_dirty(struct buffer_head *bh)
 {
+	/* EXPLODE */
+	EXPLODE_HOOK(bh_dirty, bh);
+	/* END EXPLODE */
 	WARN_ON_ONCE(!buffer_uptodate(bh));
 
 	trace_block_dirty_buffer(bh);
@@ -1396,11 +1504,19 @@ struct buffer_head *
 __bread_gfp(struct block_device *bdev, sector_t block,
 		   unsigned size, gfp_t gfp)
 {
+	/* EXPLODE */
+	if (choose(EKM_BREAD, 2))
+		return NULL;
+	else {
+	/* END EXPLODE */
 	struct buffer_head *bh = __getblk_gfp(bdev, block, size, gfp);
 
 	if (likely(bh) && !buffer_uptodate(bh))
 		bh = __bread_slow(bh);
 	return bh;
+	/* EXPLODE */
+	}
+	/* END EXPLODE */
 }
 EXPORT_SYMBOL(__bread_gfp);
 
@@ -1468,7 +1584,7 @@ static void discard_buffer(struct buffer_head * bh)
 {
 	unsigned long b_state, b_state_old;
 
-	lock_buffer(bh);
+	lock_buffer_no_log(bh);
 	clear_buffer_dirty(bh);
 	bh->b_bdev = NULL;
 	b_state = bh->b_state;
@@ -3017,6 +3133,16 @@ static int submit_bh_wbc(int op, int op_flags, struct buffer_head *bh,
 	BUG_ON(buffer_delay(bh));
 	BUG_ON(buffer_unwritten(bh));
 
+	/* EXPLODE */
+	if(op == REQ_OP_WRITE) {
+		if (op_flags & REQ_SYNC) {
+			EXPLODE_HOOK(bh_write_sync, bh);
+		} else {
+			EXPLODE_HOOK(bh_write, bh);
+		}
+	}
+	/* END EXPLODE */
+
 	/*
 	 * Only clear out a write error when rewriting
 	 */
@@ -3057,6 +3183,7 @@ static int submit_bh_wbc(int op, int op_flags, struct buffer_head *bh,
 
 int submit_bh(int op, int op_flags, struct buffer_head *bh)
 {
+
 	return submit_bh_wbc(op, op_flags, bh, 0, NULL);
 }
 EXPORT_SYMBOL(submit_bh);
@@ -3104,6 +3231,13 @@ void ll_rw_block(int op, int op_flags,  int nr, struct buffer_head *bhs[])
 				continue;
 			}
 		} else {
+		        /* EXPLODE */
+			// simulate a read error
+			if(buffer_uptodate(bh) && !buffer_dirty(bh)
+			   && choose(EKM_BREAD, 2)) {
+				clear_buffer_uptodate(bh);
+			}
+			/* END EXPLODE */
 			if (!buffer_uptodate(bh)) {
 				bh->b_end_io = end_buffer_read_sync;
 				get_bh(bh);
diff --git a/fs/jbd2/journal.c b/fs/jbd2/journal.c
index 17fdc482f554..cbef87939c3b 100644
--- a/fs/jbd2/journal.c
+++ b/fs/jbd2/journal.c
@@ -235,8 +235,14 @@ static int kjournald2(void *arg)
 		if (journal->j_commit_sequence != journal->j_commit_request)
 			should_sleep = 0;
 		transaction = journal->j_running_transaction;
-		if (transaction && time_after_eq(jiffies,
-						transaction->t_expires))
+		/* EXPLODE */
+		/* commented out and changed to the one below */
+		/*if (transaction && time_after_eq(jiffies,
+		  transaction->t_expires))*/
+		if (transaction /* time_after_eq(jiffies,
+				   transaction->t_expires)*/)
+		  /* END EXPLODE */
+
 			should_sleep = 0;
 		if (journal->j_flags & JBD2_UNMOUNT)
 			should_sleep = 0;
@@ -254,7 +260,10 @@ static int kjournald2(void *arg)
 	 * Were we woken up by a commit wakeup event?
 	 */
 	transaction = journal->j_running_transaction;
-	if (transaction && time_after_eq(jiffies, transaction->t_expires)) {
+	/* EXPLODE */
+	/*if (transaction && time_after_eq(jiffies, transaction->t_expires)) {*/
+	if (transaction /* && time_after_eq(jiffies, transaction->t_expires)*/) {
+	/* END EXPLODE */
 		journal->j_commit_request = transaction->t_tid;
 		jbd_debug(1, "woke because of timeout\n");
 	}
diff --git a/fs/jbd2/transaction.c b/fs/jbd2/transaction.c
index 43985738aa86..caa7631764a6 100644
--- a/fs/jbd2/transaction.c
+++ b/fs/jbd2/transaction.c
@@ -2453,9 +2453,15 @@ int jbd2_journal_invalidatepage(journal_t *journal,
 
 		if (offset <= curr_off) {
 			/* This block is wholly outside the truncation point */
-			lock_buffer(bh);
+			/* EXPLODE */
+			/* when bh is freed, its bdev is set to
+			   null. so we'll lose the unlock.  */
+			/* lock_buffer(bh); */
+			lock_buffer_no_log(bh);
 			ret = journal_unmap_buffer(journal, bh, partial_page);
-			unlock_buffer(bh);
+			unlock_buffer_no_log(bh);
+			/* unlock_buffer(bh); */
+			/* END EXPLODE */
 			if (ret < 0)
 				return ret;
 			may_free &= ret;
diff --git a/fs/mpage.c b/fs/mpage.c
index 830e6cc2a9e7..861efe1bd337 100644
--- a/fs/mpage.c
+++ b/fs/mpage.c
@@ -454,7 +454,7 @@ static void clean_buffers(struct page *page, unsigned first_unmapped)
 	do {
 		if (buffer_counter++ == first_unmapped)
 			break;
-		clear_buffer_dirty(bh);
+		clear_buffer_dirty_no_log(bh);
 		bh = bh->b_this_page;
 	} while (bh != head);
 
diff --git a/fs/namei.c b/fs/namei.c
index e99e2a9da0f7..1a35a1d2107e 100644
--- a/fs/namei.c
+++ b/fs/namei.c
@@ -40,6 +40,10 @@
 #include <linux/init_task.h>
 #include <linux/uaccess.h>
 
+/* EXPLODE */
+#include <linux/explode.h>
+/* END EXPLODE */
+
 #include "internal.h"
 #include "mount.h"
 
@@ -3685,7 +3689,18 @@ SYSCALL_DEFINE3(mkdirat, int, dfd, const char __user *, pathname, umode_t, mode)
 
 SYSCALL_DEFINE2(mkdir, const char __user *, pathname, umode_t, mode)
 {
-	return do_mkdirat(AT_FDCWD, pathname, mode);
+        long error;
+	/* EXPLODE */
+	EXPLODE_SYSCALL_INIT;
+	EXPLODE_SYSCALL_BEFORE(sys_mkdir, pathname, mode);
+	/* END EXPLODE */
+
+	error = do_mkdirat(AT_FDCWD, pathname, mode);
+
+	/* EXPLODE */
+	EXPLODE_SYSCALL_AFTER(sys_mkdir, error, pathname, mode);
+	/* END EXPLODE */
+        return error;
 }
 
 int vfs_rmdir(struct inode *dir, struct dentry *dentry)
@@ -3788,7 +3803,19 @@ long do_rmdir(int dfd, struct filename *name)
 
 SYSCALL_DEFINE1(rmdir, const char __user *, pathname)
 {
-	return do_rmdir(AT_FDCWD, getname(pathname));
+	long error;
+	/* EXPLODE */
+	EXPLODE_SYSCALL_INIT;
+	EXPLODE_SYSCALL_BEFORE(sys_rmdir, pathname);
+	/* END EXPLODE */
+
+	error = do_rmdir(AT_FDCWD, getname(pathname));
+
+	/* EXPLODE */
+	EXPLODE_SYSCALL_AFTER(sys_rmdir, error, pathname);
+	/* END EXPLODE */
+
+	return error;
 }
 
 /**
@@ -3939,7 +3966,19 @@ SYSCALL_DEFINE3(unlinkat, int, dfd, const char __user *, pathname, int, flag)
 
 SYSCALL_DEFINE1(unlink, const char __user *, pathname)
 {
-	return do_unlinkat(AT_FDCWD, getname(pathname));
+	long error;
+	/* EXPLODE */
+	EXPLODE_SYSCALL_INIT;
+	EXPLODE_SYSCALL_BEFORE(sys_unlink, pathname);
+	/* END EXPLODE */
+
+	error = do_unlinkat(AT_FDCWD, getname(pathname));
+
+	/* EXPLODE */
+	EXPLODE_SYSCALL_AFTER(sys_unlink, error, pathname);
+	/* END EXPLODE */
+
+	return error;
 }
 
 int vfs_symlink(struct inode *dir, struct dentry *dentry, const char *oldname)
@@ -4002,7 +4041,19 @@ SYSCALL_DEFINE3(symlinkat, const char __user *, oldname,
 
 SYSCALL_DEFINE2(symlink, const char __user *, oldname, const char __user *, newname)
 {
-	return do_symlinkat(oldname, AT_FDCWD, newname);
+	long error;
+	/* EXPLODE */
+	EXPLODE_SYSCALL_INIT;
+	EXPLODE_SYSCALL_BEFORE(sys_symlink, oldname, newname);
+	/* END EXPLODE */
+
+	error = do_symlinkat(oldname, AT_FDCWD, newname);
+
+	/* EXPLODE */
+	EXPLODE_SYSCALL_AFTER(sys_symlink, error, oldname, newname);
+	/* END EXPLODE */
+
+	return error;
 }
 
 /**
@@ -4167,7 +4218,19 @@ SYSCALL_DEFINE5(linkat, int, olddfd, const char __user *, oldname,
 
 SYSCALL_DEFINE2(link, const char __user *, oldname, const char __user *, newname)
 {
-	return do_linkat(AT_FDCWD, oldname, AT_FDCWD, newname, 0);
+	long error;
+	/* EXPLODE */
+	EXPLODE_SYSCALL_INIT;
+	EXPLODE_SYSCALL_BEFORE(sys_link, oldname, newname);
+	/* END EXPLODE */
+
+	error = do_linkat(AT_FDCWD, oldname, AT_FDCWD, newname, 0);
+
+	/* EXPLODE */
+	EXPLODE_SYSCALL_AFTER(sys_link, error, oldname, newname);
+	/* END EXPLODE */
+
+	return error;
 }
 
 /**
@@ -4499,7 +4562,18 @@ SYSCALL_DEFINE4(renameat, int, olddfd, const char __user *, oldname,
 
 SYSCALL_DEFINE2(rename, const char __user *, oldname, const char __user *, newname)
 {
-	return do_renameat2(AT_FDCWD, oldname, AT_FDCWD, newname, 0);
+	long error;
+	/* EXPLODE */
+	EXPLODE_SYSCALL_INIT;
+	EXPLODE_SYSCALL_BEFORE(sys_rename, oldname, newname);
+	/* END EXPLODE */
+
+	error = do_renameat2(AT_FDCWD, oldname, AT_FDCWD, newname, 0);
+
+	/* EXPLODE */
+	EXPLODE_SYSCALL_AFTER(sys_rename, error, oldname, newname);
+	/* END EXPLODE */
+	return error;
 }
 
 int readlink_copy(char __user *buffer, int buflen, const char *link)
diff --git a/fs/open.c b/fs/open.c
index 9af548fb841b..23b5f745cc1d 100644
--- a/fs/open.c
+++ b/fs/open.c
@@ -33,6 +33,10 @@
 #include <linux/dnotify.h>
 #include <linux/compat.h>
 
+/* EXPLODE */
+#include <linux/explode.h>
+/* END EXPLODE */
+
 #include "internal.h"
 
 int do_truncate(struct dentry *dentry, loff_t length, unsigned int time_attrs,
@@ -142,7 +146,20 @@ long do_sys_truncate(const char __user *pathname, loff_t length)
 
 SYSCALL_DEFINE2(truncate, const char __user *, path, long, length)
 {
-	return do_sys_truncate(path, length);
+	long ret;
+
+	/* EXPLODE */
+	EXPLODE_SYSCALL_INIT;
+	EXPLODE_SYSCALL_BEFORE(sys_truncate, path, length);
+	/* END EXPLODE */
+
+	ret = do_sys_truncate(path, (long)length);
+
+	/* EXPLODE */
+	EXPLODE_SYSCALL_AFTER(sys_truncate, ret, path, length);
+	/* END EXPLODE */
+
+	return ret;
 }
 
 #ifdef CONFIG_COMPAT
@@ -202,7 +219,17 @@ long do_sys_ftruncate(unsigned int fd, loff_t length, int small)
 
 SYSCALL_DEFINE2(ftruncate, unsigned int, fd, unsigned long, length)
 {
-	return do_sys_ftruncate(fd, length, 1);
+	long ret;
+	/* EXPLODE */
+	EXPLODE_SYSCALL_INIT;
+	EXPLODE_SYSCALL_BEFORE(sys_ftruncate, fd, length);
+	/* END EXPLODE */
+
+	ret = do_sys_ftruncate(fd, length, 1);
+	/* EXPLODE */
+	EXPLODE_SYSCALL_AFTER(sys_ftruncate, ret, fd, length);
+	/* END EXPLODE */
+	return ret;
 }
 
 #ifdef CONFIG_COMPAT
@@ -486,6 +513,12 @@ SYSCALL_DEFINE1(chdir, const char __user *, filename)
 {
 	struct path path;
 	int error;
+
+	/* EXPLODE */
+	EXPLODE_SYSCALL_INIT;
+	EXPLODE_SYSCALL_BEFORE(sys_chdir, filename);
+	/* END EXPLODE */
+
 	unsigned int lookup_flags = LOOKUP_FOLLOW | LOOKUP_DIRECTORY;
 retry:
 	error = user_path_at(AT_FDCWD, filename, lookup_flags, &path);
@@ -505,6 +538,9 @@ SYSCALL_DEFINE1(chdir, const char __user *, filename)
 		goto retry;
 	}
 out:
+	/* EXPLODE */
+	EXPLODE_SYSCALL_AFTER(sys_chdir, error, filename);
+	/* END EXPLODE */
 	return error;
 }
 
@@ -1187,9 +1223,19 @@ long do_sys_open(int dfd, const char __user *filename, int flags, umode_t mode)
 
 SYSCALL_DEFINE3(open, const char __user *, filename, int, flags, umode_t, mode)
 {
+	/* EXPLODE */
+	EXPLODE_SYSCALL_INIT;
+	EXPLODE_SYSCALL_BEFORE(sys_open, filename, flags, mode);
+	/* END EXPLODE */
+
 	if (force_o_largefile())
 		flags |= O_LARGEFILE;
-	return do_sys_open(AT_FDCWD, filename, flags, mode);
+	long ret = do_sys_open(AT_FDCWD, filename, flags, mode);
+
+	/* EXPLODE */
+	EXPLODE_SYSCALL_AFTER(sys_open, ret, filename, flags, mode);
+	/* END EXPLODE */
+	return ret;
 }
 
 SYSCALL_DEFINE4(openat, int, dfd, const char __user *, filename, int, flags,
@@ -1292,7 +1338,12 @@ EXPORT_SYMBOL(filp_close);
  */
 SYSCALL_DEFINE1(close, unsigned int, fd)
 {
-	int retval = __close_fd(current->files, fd);
+	/* EXPLODE */
+	EXPLODE_SYSCALL_INIT;
+	EXPLODE_SYSCALL_BEFORE(sys_close, fd);
+	/* END EXPLODE */
+
+	long retval = __close_fd(current->files, fd);
 
 	/* can't restart close syscall because file table entry was cleared */
 	if (unlikely(retval == -ERESTARTSYS ||
@@ -1301,6 +1352,10 @@ SYSCALL_DEFINE1(close, unsigned int, fd)
 		     retval == -ERESTART_RESTARTBLOCK))
 		retval = -EINTR;
 
+	/* EXPLODE */
+	EXPLODE_SYSCALL_AFTER(sys_close, retval, fd);
+	/* END EXPLODE */
+
 	return retval;
 }
 
diff --git a/fs/read_write.c b/fs/read_write.c
index d3428189f36b..91a0c9446cd4 100644
--- a/fs/read_write.c
+++ b/fs/read_write.c
@@ -25,6 +25,10 @@
 #include <linux/uaccess.h>
 #include <asm/unistd.h>
 
+/* EXPLODE */
+#include <linux/explode.h>
+/* END EXPLODE */
+
 const struct file_operations generic_ro_fops = {
 	.llseek		= generic_file_llseek,
 	.read_iter	= generic_file_read_iter,
@@ -321,7 +325,18 @@ static off_t ksys_lseek(unsigned int fd, off_t offset, unsigned int whence)
 
 SYSCALL_DEFINE3(lseek, unsigned int, fd, off_t, offset, unsigned int, whence)
 {
-	return ksys_lseek(fd, offset, whence);
+	/* EXPLODE */
+	EXPLODE_SYSCALL_INIT;
+	EXPLODE_SYSCALL_BEFORE(sys_lseek, fd, offset, whence);
+	/* END EXPLODE */
+
+	long retval = ksys_lseek(fd, offset, whence);
+
+	/* EXPLODE */
+	EXPLODE_SYSCALL_AFTER(sys_lseek, retval, fd, offset, whence);
+	/* END EXPLODE */
+
+	return retval;
 }
 
 #ifdef CONFIG_COMPAT
@@ -337,6 +352,12 @@ SYSCALL_DEFINE5(llseek, unsigned int, fd, unsigned long, offset_high,
 		unsigned long, offset_low, loff_t __user *, result,
 		unsigned int, whence)
 {
+	/* EXPLODE */
+	EXPLODE_SYSCALL_INIT;
+	EXPLODE_SYSCALL_BEFORE(sys_llseek, fd, offset_high, 
+			       offset_low, result, whence);
+	/* END EXPLODE */
+
 	int retval;
 	struct fd f = fdget_pos(fd);
 	loff_t offset;
@@ -359,6 +380,10 @@ SYSCALL_DEFINE5(llseek, unsigned int, fd, unsigned long, offset_high,
 	}
 out_putf:
 	fdput_pos(f);
+	/* EXPLODE */
+	EXPLODE_SYSCALL_AFTER(sys_llseek, retval, fd, offset_high, 
+			      offset_low, result, whence);
+	/* END EXPLODE */
 	return retval;
 }
 #endif
@@ -622,11 +647,19 @@ ssize_t ksys_read(unsigned int fd, char __user *buf, size_t count)
 
 SYSCALL_DEFINE3(read, unsigned int, fd, char __user *, buf, size_t, count)
 {
+	/* EXPLODE */
+	EXPLODE_SYSCALL_INIT;
+	EXPLODE_SYSCALL_BEFORE(sys_read, fd, buf, count);
+	/* END EXPLODE */
 	return ksys_read(fd, buf, count);
 }
 
 ssize_t ksys_write(unsigned int fd, const char __user *buf, size_t count)
 {
+	/* EXPLODE */
+	EXPLODE_SYSCALL_INIT;
+	EXPLODE_SYSCALL_BEFORE(sys_write, fd, buf, count);
+	/* END EXPLODE */
 	struct fd f = fdget_pos(fd);
 	ssize_t ret = -EBADF;
 
@@ -642,6 +675,9 @@ ssize_t ksys_write(unsigned int fd, const char __user *buf, size_t count)
 		fdput_pos(f);
 	}
 
+	/* EXPLODE */
+	EXPLODE_SYSCALL_AFTER(sys_read, ret, fd, buf, count);
+	/* END EXPLODE */
 	return ret;
 }
 
@@ -656,7 +692,10 @@ ssize_t ksys_pread64(unsigned int fd, char __user *buf, size_t count,
 {
 	struct fd f;
 	ssize_t ret = -EBADF;
-
+	/* EXPLODE */
+	//EXPLODE_SYSCALL_INIT;
+	//EXPLODE_SYSCALL_BEFORE(sys_pread64, fd, buf, count);
+	/* END EXPLODE */
 	if (pos < 0)
 		return -EINVAL;
 
@@ -668,6 +707,9 @@ ssize_t ksys_pread64(unsigned int fd, char __user *buf, size_t count,
 		fdput(f);
 	}
 
+	/* EXPLODE */
+	//EXPLODE_SYSCALL_AFTER(sys_write, ret, fd, buf, count);
+	/* END EXPLODE */
 	return ret;
 }
 
@@ -683,6 +725,11 @@ ssize_t ksys_pwrite64(unsigned int fd, const char __user *buf,
 	struct fd f;
 	ssize_t ret = -EBADF;
 
+	/* EXPLODE */
+	EXPLODE_SYSCALL_INIT;
+	EXPLODE_SYSCALL_BEFORE(sys_pwrite64, fd, buf, count, pos);
+	/* END EXPLODE */
+
 	if (pos < 0)
 		return -EINVAL;
 
@@ -694,12 +741,20 @@ ssize_t ksys_pwrite64(unsigned int fd, const char __user *buf,
 		fdput(f);
 	}
 
+	/* EXPLODE */
+	EXPLODE_SYSCALL_AFTER(sys_pwrite64, ret, fd, buf, count, pos);
+	/* END EXPLODE */
 	return ret;
 }
 
 SYSCALL_DEFINE4(pwrite64, unsigned int, fd, const char __user *, buf,
 			 size_t, count, loff_t, pos)
 {
+	/* EXPLODE */
+	EXPLODE_SYSCALL_INIT;
+	EXPLODE_SYSCALL_BEFORE(sys_pwrite64, fd, buf, count, pos);
+	/* END EXPLODE */
+
 	return ksys_pwrite64(fd, buf, count, pos);
 }
 
diff --git a/fs/sync.c b/fs/sync.c
index 1373a610dc78..b1a6487b5edb 100644
--- a/fs/sync.c
+++ b/fs/sync.c
@@ -18,6 +18,10 @@
 #include <linux/backing-dev.h>
 #include "internal.h"
 
+/* EXPLODE */
+#include <linux/explode.h>
+/* END EXPLODE */
+
 #define VALID_FLAGS (SYNC_FILE_RANGE_WAIT_BEFORE|SYNC_FILE_RANGE_WRITE| \
 			SYNC_FILE_RANGE_WAIT_AFTER)
 
@@ -122,7 +126,14 @@ void ksys_sync(void)
 
 SYSCALL_DEFINE0(sync)
 {
+	/* EXPLODE */
+	EXPLODE_SYSCALL_INIT;
+	EXPLODE_SYSCALL_BEFORE(sys_sync);
+	/* END EXPLODE */
 	ksys_sync();
+	/* EXPLODE */
+	EXPLODE_SYSCALL_AFTER(sys_sync, 0);
+	/* END EXPLODE */
 	return 0;
 }
 
@@ -229,12 +240,30 @@ static int do_fsync(unsigned int fd, int datasync)
 
 SYSCALL_DEFINE1(fsync, unsigned int, fd)
 {
-	return do_fsync(fd, 0);
+	/* EXPLODE */
+	int ret;
+	EXPLODE_SYSCALL_INIT;
+	EXPLODE_SYSCALL_BEFORE(sys_fsync, fd);
+	/* END EXPLODE */
+	ret = do_fsync(fd, 0);
+	/* EXPLODE */
+	EXPLODE_SYSCALL_AFTER(sys_fsync, ret, fd);
+	/* END EXPLODE */
+	return ret;
 }
 
 SYSCALL_DEFINE1(fdatasync, unsigned int, fd)
 {
-	return do_fsync(fd, 1);
+	/* EXPLODE */
+	int ret;
+	EXPLODE_SYSCALL_INIT;
+	EXPLODE_SYSCALL_BEFORE(sys_fdatasync, fd);
+	/* END EXPLODE */
+	ret = do_fsync(fd, 1);
+	/* EXPLODE */
+	EXPLODE_SYSCALL_AFTER(sys_fdatasync, ret, fd);
+	/* END EXPLODE */
+	return ret;
 }
 
 int sync_file_range(struct file *file, loff_t offset, loff_t nbytes,
diff --git a/include/linux/buffer_head.h b/include/linux/buffer_head.h
index 6b47f94378c5..334456040dcd 100644
--- a/include/linux/buffer_head.h
+++ b/include/linux/buffer_head.h
@@ -118,9 +118,28 @@ static __always_inline int test_clear_buffer_##name(struct buffer_head *bh) \
  * do something in addition to setting a b_state bit.
  */
 BUFFER_FNS(Uptodate, uptodate)
+/* EXPLODE */
+#define EXPLODE_TRACK_DIRTY_BIT
+#ifndef EXPLODE_TRACK_DIRTY_BIT
 BUFFER_FNS(Dirty, dirty)
 TAS_BUFFER_FNS(Dirty, dirty)
 BUFFER_FNS(Lock, locked)
+#else
+     void set_buffer_dirty(struct buffer_head *bh);
+     void clear_buffer_dirty(struct buffer_head *bh);
+     void clear_buffer_dirty_no_log(struct buffer_head *bh);
+     int buffer_dirty(const struct buffer_head *bh);
+     int test_set_buffer_dirty(struct buffer_head *bh);
+     int test_clear_buffer_dirty(struct buffer_head *bh);
+     void set_buffer_locked(struct buffer_head *bh);
+     void clear_buffer_locked(struct buffer_head *bh);
+     int buffer_locked(const struct buffer_head *bh);
+     int test_set_buffer_locked(struct buffer_head *bh);
+     int test_clear_buffer_locked(struct buffer_head *bh);
+     void lock_buffer_no_log(struct buffer_head *bh);
+     void unlock_buffer_no_log(struct buffer_head *bh);
+#endif
+     /* END EXPLODE */
 BUFFER_FNS(Req, req)
 TAS_BUFFER_FNS(Req, req)
 BUFFER_FNS(Mapped, mapped)
@@ -268,6 +287,9 @@ int nobh_writepage(struct page *page, get_block_t *get_block,
 
 void buffer_init(void);
 
+/* EXPLODE */
+//#ifndef EXPLODE_TRACK_DIRTY_BIT
+/* END EXPLODE */
 /*
  * inline definitions
  */
@@ -364,7 +386,15 @@ static inline void lock_buffer(struct buffer_head *bh)
 	might_sleep();
 	if (!trylock_buffer(bh))
 		__lock_buffer(bh);
+
 }
+/* EXPLODE */
+//#else
+//void wait_on_buffer(struct buffer_head *bh);
+//void lock_buffer(struct buffer_head *bh);
+//#endif
+/* END EXPLODE */
+
 
 static inline struct buffer_head *getblk_unmovable(struct block_device *bdev,
 						   sector_t block,
diff --git a/include/linux/explode.h b/include/linux/explode.h
new file mode 100644
index 000000000000..fa4796179ec1
--- /dev/null
+++ b/include/linux/explode.h
@@ -0,0 +1,138 @@
+#ifndef __LINUX_EXPLODE_H
+#define __LINUX_EXPLODE_H
+
+/* Choice point identifiers. */
+enum choice_point {
+	EKM_KMALLOC = 1,
+	EKM_USERCOPY = 2,
+	EKM_BREAD = 4,
+	EKM_SCHEDULE = 8,
+	EKM_CACHE_READ = 16,
+	EKM_DISK_READ = 32,
+	EKM_DISK_WRITE = 64,
+};
+int choose(enum choice_point cp, int n_possibilities);
+void enable_choose(void);
+void disable_choose(void);
+int choose_enabled(void);
+
+#include <linux/spinlock.h>
+
+struct buffer_head;
+struct bio;
+struct request;
+#define EKM_BH(state) \
+	void (*bh_##state)(struct buffer_head *bh)
+#define EKM_BIO(state) \
+	void (*bio_##state)(struct bio *bio)
+#define EKM_REQ(state) \
+	void (*req_##state)(struct request *req)
+
+struct explode_kernel_hooks {
+
+	// choose
+	int (*choose)(enum choice_point cp, int n_possibilities);
+	int (*fail_req)(struct request *req);
+
+        void (*log_buffer_record)(int, int, long, int, const char*);
+        
+        /* struct buffer_head record types */
+        EKM_BH(dirty);
+        EKM_BH(clean);
+        EKM_BH(lock);
+        EKM_BH(wait);
+        EKM_BH(unlock);
+        EKM_BH(write);
+        EKM_BH(write_sync);
+#       undef EKM_BH
+
+        /* struct bio record types */
+        EKM_BIO(start_write);
+        EKM_BIO(wait);
+#       undef EKM_BIO
+
+        /* struct request record types */
+        EKM_REQ(write);
+        EKM_REQ(read);
+        EKM_REQ(write_done);
+#       undef EKM_REQ
+
+
+        /* BEGIN SYSCALL */
+/* 
+ *   Everything between BEGIN SYSCALL and END SYSCALL 
+ *   is automatically generated from ./scripts/gen_syscall_log.pl 
+ */
+
+        void (*enter_sys_chdir)(int *entry_lsn, const char __user * filename);
+        void (*exit_sys_chdir)(int *entry_lsn,  long  ret, const char __user * filename);
+        void (*enter_sys_close)(int *entry_lsn, unsigned int  fd);
+        void (*exit_sys_close)(int *entry_lsn,  long  ret, unsigned int  fd);
+        void (*enter_sys_fdatasync)(int *entry_lsn, unsigned int  fd);
+        void (*exit_sys_fdatasync)(int *entry_lsn,  long  ret, unsigned int  fd);
+        void (*enter_sys_fsync)(int *entry_lsn, unsigned int  fd);
+        void (*exit_sys_fsync)(int *entry_lsn,  long  ret, unsigned int  fd);
+        void (*enter_sys_ftruncate)(int *entry_lsn, unsigned int  fd, unsigned long  length);
+        void (*exit_sys_ftruncate)(int *entry_lsn,  long  ret, unsigned int  fd, unsigned long  length);
+        void (*enter_sys_link)(int *entry_lsn, const char  __user * oldname, const char  __user * newname);
+        void (*exit_sys_link)(int *entry_lsn,  long  ret, const char  __user * oldname, const char  __user * newname);
+        void (*enter_sys_llseek)(int *entry_lsn, unsigned int  fd, unsigned long  offset_high, unsigned long  offset_low,  loff_t  __user * result, unsigned int  origin);
+        void (*exit_sys_llseek)(int *entry_lsn,  long  ret, unsigned int  fd, unsigned long  offset_high, unsigned long  offset_low,  loff_t  __user * result, unsigned int  origin);
+        void (*enter_sys_lseek)(int *entry_lsn, unsigned int  fd, off_t  offset, unsigned int  origin);
+        void (*exit_sys_lseek)(int *entry_lsn,  off_t  ret, unsigned int  fd, off_t  offset, unsigned int  origin);
+        void (*enter_sys_mkdir)(int *entry_lsn, const char  __user * pathname, int  mode);
+        void (*exit_sys_mkdir)(int *entry_lsn,  long  ret, const char  __user * pathname, int  mode);
+        void (*enter_sys_open)(int *entry_lsn, const char  __user * filename, int  flags, int  mode);
+        void (*exit_sys_open)(int *entry_lsn,  long  ret, const char  __user * filename, int  flags, int  mode);
+        void (*enter_sys_pwrite64)(int *entry_lsn, unsigned int  fd,  const char  __user * buf, size_t  count, loff_t  pos);
+        void (*exit_sys_pwrite64)(int *entry_lsn,  ssize_t  ret, unsigned int  fd,  const char  __user * buf, size_t  count, loff_t  pos);
+        void (*enter_sys_read)(int *entry_lsn, unsigned int  fd,    char  __user * buf, size_t  count);
+        void (*exit_sys_read)(int *entry_lsn,  ssize_t  ret, unsigned int  fd,    char  __user * buf, size_t  count);
+        void (*enter_sys_rename)(int *entry_lsn, const char  __user * oldname, const char  __user * newname);
+        void (*exit_sys_rename)(int *entry_lsn,  long  ret, const char  __user * oldname, const char  __user * newname);
+        void (*enter_sys_rmdir)(int *entry_lsn, const char  __user * pathname);
+        void (*exit_sys_rmdir)(int *entry_lsn,  long  ret, const char  __user * pathname);
+        void (*enter_sys_symlink)(int *entry_lsn, const char  __user * oldname, const char  __user * newname);
+        void (*exit_sys_symlink)(int *entry_lsn,  long  ret, const char  __user * oldname, const char  __user * newname);
+        void (*enter_sys_sync)(int *entry_lsn);
+        void (*exit_sys_sync)(int *entry_lsn,  long  ret);
+        void (*enter_sys_truncate)(int *entry_lsn, const char  __user * filename, unsigned long  length);
+        void (*exit_sys_truncate)(int *entry_lsn,  long  ret, const char  __user * filename, unsigned long  length);
+        void (*enter_sys_unlink)(int *entry_lsn, const char  __user * pathname);
+        void (*exit_sys_unlink)(int *entry_lsn,  long  ret, const char  __user * pathname);
+        void (*enter_sys_write)(int *entry_lsn, unsigned int  fd,  const char  __user * buf, size_t  count);
+        void (*exit_sys_write)(int *entry_lsn,  ssize_t  ret, unsigned int  fd,  const char  __user * buf, size_t  count);
+        /* END SYSCALL */
+};
+
+extern struct buffer_head *ekm_commit_bh;
+extern struct bio *ekm_commit_bio;
+
+extern struct explode_kernel_hooks ek_hooks;
+extern spinlock_t ek_hooks_lock;
+
+#define EXPLODE_HOOK(fn, args...) \
+	do { \
+		if(ek_hooks.fn) \
+			(ek_hooks.fn) (args); \
+	} while(0)
+
+#define EXPLODE_INVALID_LSN (-1)
+#define EXPLODE_SYSCALL_INIT \
+	int explode_lsn = EXPLODE_INVALID_LSN;
+
+#define EXPLODE_SYSCALL_BEFORE(fn, args...) \
+	do { \
+		if(ek_hooks.enter_##fn) \
+			(ek_hooks.enter_##fn) (&explode_lsn, ##args); \
+	} while(0)
+
+#define EXPLODE_SYSCALL_AFTER(fn, ret, args...) \
+	do { \
+		if(ek_hooks.exit_##fn) \
+			(ek_hooks.exit_##fn) (&explode_lsn, ret, ##args); \
+	} while(0)
+
+int fail_req(struct request *req);
+
+#endif
diff --git a/kernel/Makefile b/kernel/Makefile
index 9a20016d4900..eaadfe022175 100644
--- a/kernel/Makefile
+++ b/kernel/Makefile
@@ -10,7 +10,7 @@ obj-y     = fork.o exec_domain.o panic.o \
 	    extable.o params.o \
 	    kthread.o sys_ni.o nsproxy.o \
 	    notifier.o ksysfs.o cred.o reboot.o \
-	    async.o range.o smpboot.o ucount.o regset.o
+	    async.o range.o smpboot.o ucount.o regset.o explode.o
 
 obj-$(CONFIG_BPFILTER) += usermode_driver.o
 obj-$(CONFIG_MODULES) += kmod.o
diff --git a/kernel/explode.c b/kernel/explode.c
new file mode 100644
index 000000000000..7808fc5cf64d
--- /dev/null
+++ b/kernel/explode.c
@@ -0,0 +1,67 @@
+#include <linux/module.h>
+#include <linux/explode.h>
+#include <linux/fs.h>
+#include <linux/blkdev.h>
+
+// all fields should initialized to NULL
+struct explode_kernel_hooks ek_hooks = {0};
+DEFINE_SPINLOCK(ek_hooks_lock);
+EXPORT_SYMBOL(ek_hooks);
+EXPORT_SYMBOL(ek_hooks_lock);
+
+/* Returns the path to take, out of N_POSSIBILITIES
+   possibilities, at choice point CP.  The default choice point
+   is always 0. */
+int
+choose(enum choice_point cp, int n_possibilities) 
+{
+	if(ek_hooks.choose)
+		return ek_hooks.choose(cp, n_possibilities);
+	return 0;
+}
+
+/* must call disable_choose first, then call enable_choose */
+static int choices_enabled = 0;  /* == 0 means enabled */
+void
+enable_choose(void)
+{
+	choices_enabled ++;
+	if(choices_enabled > 0)
+		panic("EXPLODE: enable_choose(%d) > 0!", choices_enabled);
+}
+
+void
+disable_choose(void)
+{
+	if(choices_enabled > 0)
+		panic("EXPLODE: disable_choose(%d) > 0!", choices_enabled);
+        choices_enabled --;
+}
+
+int choose_enabled(void)
+{
+	return choices_enabled == 0;
+}
+
+int fail_req(struct request *req)
+{
+	if(ek_hooks.fail_req)
+		return ek_hooks.fail_req(req);
+	return 0;
+}
+
+#if 0
+#define EKM_SYSCALL(fn, rettype, args...) \
+rettype explode_#fn(args) { \
+EXPLODE_SYSCALL_INIT;
+EXPLODE_SYSCALL_BEFOREINIT;
+}
+#include <linux/explode_def.h>
+#undef EKM_SYSCALL
+#endif
+
+EXPORT_SYMBOL(choose);
+EXPORT_SYMBOL(enable_choose);
+EXPORT_SYMBOL(disable_choose);
+EXPORT_SYMBOL(choose_enabled);
+EXPORT_SYMBOL(fail_req);
diff --git a/kernel/fork.c b/kernel/fork.c
index 5fe09d4e6d6a..36d9d2c8adf8 100644
--- a/kernel/fork.c
+++ b/kernel/fork.c
@@ -147,6 +147,10 @@ int lockdep_tasklist_lock_is_held(void)
 EXPORT_SYMBOL_GPL(lockdep_tasklist_lock_is_held);
 #endif /* #ifdef CONFIG_PROVE_RCU */
 
+/* EXPLODE */
+EXPORT_SYMBOL(tasklist_lock);
+/* END EXPLODE */
+
 int nr_processes(void)
 {
 	int cpu;
diff --git a/kernel/sys.c b/kernel/sys.c
index ab6c409b1159..f69bfdd35008 100644
--- a/kernel/sys.c
+++ b/kernel/sys.c
@@ -170,7 +170,7 @@ static bool set_one_prio_perm(struct task_struct *p)
  * set the priority of a task
  * - the caller must hold the RCU read lock
  */
-static int set_one_prio(struct task_struct *p, int niceval, int error)
+int set_one_prio(struct task_struct *p, int niceval, int error)
 {
 	int no_nice;
 
diff --git a/mm/filemap.c b/mm/filemap.c
index 407b94d8ce00..5bcb2e82056f 100644
--- a/mm/filemap.c
+++ b/mm/filemap.c
@@ -47,6 +47,10 @@
 #define CREATE_TRACE_POINTS
 #include <trace/events/filemap.h>
 
+/* EXPLODE */
+#include <linux/explode.h>
+/* END EXPLODE */
+
 /*
  * FIXME: remove all knowledge of the buffer layer from the core VM
  */
@@ -2959,6 +2963,14 @@ static struct page *do_read_cache_page(struct address_space *mapping,
 	int err;
 repeat:
 	page = find_get_page(mapping, index);
+
+	/* EXPLODE */
+	if (page) {
+		if (choose(EKM_CACHE_READ, 2))
+			return ERR_PTR(-ENOMEM);
+	}
+	/* END EXPLODE */
+
 	if (!page) {
 		page = __page_cache_alloc(gfp);
 		if (!page)
diff --git a/mm/page_alloc.c b/mm/page_alloc.c
index 3fb35fe6a9e4..a34da3141331 100644
--- a/mm/page_alloc.c
+++ b/mm/page_alloc.c
@@ -71,6 +71,10 @@
 #include <linux/padata.h>
 #include <linux/khugepaged.h>
 
+/* EXPLODE */
+#include <linux/explode.h>
+/* END EXPLODE */
+
 #include <asm/sections.h>
 #include <asm/tlbflush.h>
 #include <asm/div64.h>
diff --git a/mm/slab.c b/mm/slab.c
index 5c70600d8b1c..f6e0dc55c360 100644
--- a/mm/slab.c
+++ b/mm/slab.c
@@ -130,6 +130,10 @@
 
 #include	"slab.h"
 
+/* EXPLODE */
+#include <linux/explode.h>
+/* END EXPLODE */
+
 /*
  * DEBUG	- 1 for kmem_cache_create() to honour; SLAB_RED_ZONE & SLAB_POISON.
  *		  0 for faster, smaller code (especially in the critical paths).
@@ -3646,6 +3650,10 @@ EXPORT_SYMBOL(__kmalloc_node_track_caller);
 static __always_inline void *__do_kmalloc(size_t size, gfp_t flags,
 					  unsigned long caller)
 {
+	/* EXPLODE */
+	if (!(flags & __GFP_NOFAIL) && choose(EKM_KMALLOC, 2))
+		return NULL;
+	/* END EXPLODE */
 	struct kmem_cache *cachep;
 	void *ret;
 
-- 
2.28.0

